const app = require("../app");
const debug = require("debug")("servertest:server");
const http = require("http");

const { sequelize } = require("../models");

const options = {
  host: "0.0.0.0",
  port: 8080,
};

const port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

const server = http.createServer(app);

sequelize
  .sync({ force: false })
  .then(() => {
    console.log("DB 연결성공");
    server.listen(port, () => {
      console.log(`노드 서버 포트 : ${port} 연결`);
    });
    server.on("error", onError);
    server.on("listening", onListening);
  })
  .catch((err) => {
    console.error(`DB 연결실패 - ${err}`);
  });

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
